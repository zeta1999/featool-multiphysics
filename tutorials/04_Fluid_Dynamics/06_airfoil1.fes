{"meta":{"app":"FEATool Multiphysics","author":"Precise Simulation","build":"1.9.1","date":"06-Feb-2019","descr":"Calculation of the inviscid flow field around a NACA airfoil using the potential equation. The potential or Laplace equation is equivalent to Poisson equation with zero source term. Boundary conditions are set as zero normal flow on the airfoil body, and unit velocity magnitude at the external boundaries of the domain.","dim":2,"image":"airfoil1.jpg","keyw":["naca","airfoil","potential_flow","pde"],"mlver":"R2019a","name":"airfoil1","phys":["Poisson Equation"],"system":"","time":737462,"title":"Potential Flow Over an Airfoil","type":"Fluid Dynamics","user":"precsim","ver":[1,9,1]},
"fields":["type","id","ui_arg","fcn_type","fcn_oarg"],
"data":[
["uipushtool","Standard.NewFigure",[],"ClickedCallback",[]],
["uicontrol","popup_physsel",["Poisson Equation"],"Callback",[]],
["uicontrol","edit_depvar","phi","Callback",[]],
["uicontrol","button_dlgnew_ok",[],"Callback",[]],
["uicontrol","button_naca",[],"Callback",[]],
["uicontrol","edit_series","0012","Callback",[]],
["uicontrol","edit_angle","0","Callback",[]],
["uicontrol","edit_resolution","100","Callback",[]],
["uicontrol","button_dlggobj_ok",[],"Callback",[]],
["uicontrol","button_circle_ellipse",[],"Callback",[[0.5,0],0.3,0.2,"E1"]],
["uicontrol","list_select_gobj",["E1"],"Callback",[]],
["uicontrol","button_edit_gobj",[],"Callback",[]],
["uicontrol","edit_center","0.5 0","Callback",[]],
["uicontrol","edit_x_radius","1.5","Callback",[]],
["uicontrol","edit_y_radius","1.5","Callback",[]],
["uicontrol","button_dlggobj_ok",[],"Callback",[]],
["uicontrol","list_select_gobj",["E1","N1"],"Callback",[]],
["uicontrol","button_subtract_gobj",[],"Callback",[]],
["uicontrol","button_grid_mode",1,"Callback",[]],
["uitext",[],"The default grid may be too coarse ensure an accurate solution. Press the **Settings** button to open the _Grid Settings_ dialog box and select the **Gridgen2D** grid generation algorithm."],
["uicontrol*","grid_settings",[],"Callback",[]],
["uicontrol*","grid_settings_algo",[" Gridgen2D"],"Callback",{}],
["uitext",[],"To fine tune the settings, enter `0.3` in the _Subdomain Grid Size_ edit field and `0.3 0.3 0.3 0.3 0.05 0.05` for the _Boundary Grid Size_. This will ensure that the airfoil boundaries are resolved with a small grid size, while the rest of the domain uses a coarse grid."],
["uicontrol*","grid_settings_hmax","0.3","Callback",{}],
["uicontrol*","grid_settings_hmaxb","[0.3 0.3 0.3 0.3 0.05 0.05]","Callback",{}],
["uitext",[],"Also select the **Boundary layers** checkbox to create higher quality grids near the airfoil boundaries."],
["uicontrol*","grid_settings_blayer",1,"Callback",{}],
["uicontrol","button_dlggrid_generate",[],"Callback",[]],
["uicontrol","button_dlggrid_ok",[],"Callback",[]],
["uicontrol","button_equation_mode",1,"Callback",[]],
["uitext",[],"The Poisson physics mode is used to model the potential flow equation. In the _Equation Settings_ dialog box, set the source term coefficient _f_ to `0` and also select **(P2/Q2) second order conforming** for the _FEM Discretization_ order to ensure that the velocities which are derivatives of the potential is represented with high accuracy."],
["uicontrol*","f_poi","0","Callback",[]],
["uicontrol*","popup_sfun_poi",["(P2/Q2) second order conforming"],"Callback",[]],
["uicontrol*","button_dlgeqn_ok",[],"Callback",[]],
["uitext*",[],"A convenient way to to define and store coefficients, variables, and expressions is using the _Model Constants and Expressions_ functionality. The defined expressions can then be used in point, equation, boundary coefficients, as well as postprocessing expressions, and can easily be changed and updated in a single place."],
["uitext",[],["Define expressions for the velocities, angle of attack, as well as pressure coefficient by pressing the **Constants** _Toolbar_ button, or selecting the corresponding entry from the _Equation_ menu, and entering the following variables in the _Model Constants and Expressions_ dialog box. Press _Enter_ after the last expression or use the **Add Row** button to expand the expression list.","| Name   | Expression              |","|--------|-------------------------|","|  u     |  phix                   |","|  v     |  phiy                   |","|  U     |  sqrt(u^2+v^2)          |","|  alfa  |  0                      |","|  uinf  |  cos(alfa*pi/180)       |","|  vinf  |  sin(alfa*pi/180)       |","|  cp    |  1-U^2/(uinf^2+vinf^2)  |"]],
["uicontrol*","button_const_expr",[],"Callback",[]],
["uicontrol*","edit_dlgexpr_11","u","Callback",[]],
["uicontrol*","edit_dlgexpr_12","phix","Callback",[]],
["uicontrol*","edit_dlgexpr_21","v","Callback",[]],
["uicontrol*","edit_dlgexpr_22","phiy","Callback",[]],
["uicontrol*","edit_dlgexpr_31","U","Callback",[]],
["uicontrol*","edit_dlgexpr_32","sqrt(u^2+v^2)","Callback",[]],
["uicontrol*","edit_dlgexpr_41","alfa","Callback",[]],
["uicontrol*","edit_dlgexpr_42","0","Callback",[]],
["uicontrol*","edit_dlgexpr_51","uinf","Callback",[]],
["uicontrol*","edit_dlgexpr_52","cos(alfa*pi/180)","Callback",[]],
["uicontrol*","edit_dlgexpr_61","vinf","Callback",[]],
["uicontrol*","edit_dlgexpr_62","sin(alfa*pi/180)","Callback",[]],
["uicontrol*","edit_dlgexpr_71","cp","Callback",[]],
["uicontrol*","edit_dlgexpr_72","1-U^2/(uinf^2+vinf^2)","Callback",[]],
["uicontrol*","button_dlgexpr_ok",[],"Callback",[]],
["uicontrol","button_boundary_mode",1,"Callback",[]],
["uitext*",[],"For potential flow normal velocities can naturally be prescribed as _Neumann_ boundary conditions. Set the flow at the exterior boundaries to _nx*uinf+ny*uinf_ and airfoil boundaries to zero (Where _nx_ and _ny_ will be evaluated as the unit normal vectors of the boundaries)."],
["uicontrol","list_seldom",["1","2","3","4"],"Callback",[]],
["uicontrol","popup_selbc_poi",["Neumann boundary condition"],"Callback",[]],
["uicontrol","edit_bccoef1_poi","nx*uinf+ny*vinf","Callback",[]],
["uicontrol","list_seldom",["5","6"],"Callback",[]],
["uicontrol","popup_selbc_poi",["Neumann boundary condition"],"Callback",[]],
["uicontrol","edit_bccoef1_poi","0","Callback",[]],
["uicontrol","button_dlgbdr_ok",[],"Callback",[]],
["uitext*",[],"To ensure a unique solution for stationary problems without any Dirichlet boundary prescribed value conditions, set a reference level for the potential _phi_ at one of the points."],
["uimenu","Point Constraints...",[],"Callback",[]],
["uicontrol","edit_pnt_61","0","Callback",[]],
["uicontrol","button_dlgpnt_ok",[],"Callback",[]],
["uicontrol","button_solve_mode",1,"Callback",[]],
["uicontrol","button_solve",[],"Callback",[]],
["uitext*",[],"After the problem has been solved FEATool will automatically switch to postprocessing mode and here display the potential function. Open the _Postprocessing_ settings dialog box and visualize the velocity field _U_ as surface, contour, and arrow plots."],
["uicontrol","button_post_settings",[],"Callback",[]],
["uicontrol","ssurfexpr","U","Callback",[]],
["uicontrol","ffiso",1,"Callback",[]],
["uicontrol","sisoexpr","U","Callback",[]],
["uicontrol","sisolev","20","Callback",[]],
["uicontrol","ffarrow",1,"Callback",[]],
["uicontrol","v1arrowexpr","u","Callback",[]],
["uicontrol","v2arrowexpr","v","Callback",[]],
["uicontrol","button_dlgpost_ok",[],"Callback",[]],
["uitext*",[],"Use the _Point/Line Evaluation_ functionality to plot the pressure coefficient _cp_ along the upper wing boundary. At the stagnation point at the left edge the pressure coefficient should be close to _1_, it then rapidly jumps towards _-0.5_ as the flow quickly accelerates, after which it slowly increases towards the trailing edge."],
["uimenu","Point/Line Evaluation...",{},"Callback",{}],
["uicontrol","list_selbdrcoord",["6"],"Callback",{}],
["uicontrol","edit_evalexpr","cp","Callback",{}],
["uicontrol","buttons_dlgpntline_ok",{},"Callback",{}],
["figure","Line Evaluation",{},"closeRequestFcn",{}],
["uivalidate",[],"pass=0;try,ix=fea.grid.b(3,:)==5;ind_c=fea.grid.b(1,ix);ind_e=fea.grid.b(2,ix);iv=unique(fea.grid.c(sub2ind(size(fea.grid.c),[ind_e,mod(ind_e,3)+1],[ind_c,ind_c])));x=evalexprp('x',fea,1,iv);cp=evalexprp('cp',fea,1,iv);cp_ref=[-0.4114,-0.3896,-0.3372,-0.2788,-0.2209,-0.1645,-0.1081,-0.0460,0.0381];cp=interp1(x,cp,0.1:0.1:0.9);err=norm(cp_ref-cp)./norm(cp_ref);pass=err<0.12;catch,end"],
["uitext*",[],"To see how a higher angle of attack effects the flow field, change the constant _alfa_ and solve the model again."],
["uimenu","Model Constants and Expressions...",{},"Callback",{}],
["uicontrol","edit_dlgexpr_42","6","Callback",{}],
["uicontrol","button_dlgexpr_ok",{},"Callback",{}],
["uicontrol","button_solve_mode",1,"Callback",{}],
["uicontrol","button_solve",{},"Callback",{}],
["uitext*",[],"Note that the flow field now is unsymmetric with two stagnation points. As the viscosity and the _Kutta_ condition at the trailing edge is not accounted for in this model the second stagnation point is found at the rear top boundary of the airfoil instead of at the trailing edge as would be expected."]
]}
